#!/bin/bash -l
#PBS -l nodes=1:ppn=20 
#PBS -l walltime=00:20:00
#PBS -l mem=1gb
#PBS -j oe
#PBS -m abe
#PBS -M randy.thiemann@student.uhasselt.be
#PBS -o output.txt
#PBS -A llp_h_pds

#Arguments:
# -l walltime=hh:mm:ss                    | timeout
# -l nodes=x:ppn=y                        | x nodes at y processors per node
# -l mem=xgb                              | x gb of ram
# -N name                                 | job name
# -j oe                                   | join stdout (o) and stderr (e)
# -m abe                                  | mail at abort, beginning, exit
# -M randy.thiemann@student.uhasselt.be   | mail addr
# -o stdout.txt                           | output file
#
#Env. Vars:
# PBS_O_WORKDIR = dir from where job was submitted
# PBS_JOBID = job id
#
#Commands:
# qsub pbsfile.pbs                        | submit job
# qdel <id>                               | delete job
# qstat                                   | status of all jobs
# checkjob <id>                           | job status
# showstart <id>                          | show earliest start time

PBS_O_WORKDIR=${PBS_O_WORKDIR:='.'}
cd $PBS_O_WORKDIR
export OMP_SCHEDULE="dynamic"
echo "Generating one of each input/kernel combination..."
for kernel in data/kernel/*.png; do
    export KERNELNAME=$(basename ${kernel})
    export SETTINGS=$(cat data/kernel/params.txt | grep ${KERNELNAME})
    export SETTINGS=(${SETTINGS//\ / })
    for input in data/input/*; do
        ./build/conv ${input} ${kernel} ${SETTINGS[1]} ${SETTINGS[2]}\
            output/$(basename ${input} .png)-$(basename ${kernel} .png).png
    done
done
echo "-----GENERATING DONE-----"

echo "Starting the benchmark"
echo "Running conv 30 times on a 31x31 kernel on big_building.png on every scheduler."
echo "-----DYNAMIC BENCHMARK-----"
export OMP_SCHEDULE="dynamic"
time -p for i in {1..30}; do ./build/conv data/input/big_building.png data/kernel/echo.png 0 0 benchmark.png; done
echo "-----END DYNAMIC BENCHMARK-----"

echo "-----STATIC BENCHMARK-----"
export OMP_SCHEDULE="static"
time -p for i in {1..30}; do ./build/conv data/input/big_building.png data/kernel/echo.png 0 0 benchmark.png; done
echo "-----END STATIC BENCHMARK-----"

echo "-----GUIDED BENCHMARK-----"
export OMP_SCHEDULE="guided"
time -p for i in {1..30}; do ./build/conv data/input/big_building.png data/kernel/echo.png 0 0 benchmark.png; done
echo "-----END GUIDED BENCHMARK-----"
rm benchmark.png
